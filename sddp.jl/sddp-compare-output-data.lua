PSR.assert_version(">0.24.0");

local outputs = {
    "BATotalContingencyReserveBattery",
    "BATotalContingencyReserveHydro",
    "BATotalContingencyReserveThermal",
    "BATotalDownReserveBattery",
    "BATotalDownReserveHydro",
    "BATotalDownReserveThermal",
    "BATotalUpReserveBattery",
    "BATotalUpReserveHydro",
    "BATotalUpReserveThermal",
    "BalancingAreaContingencyReserveHydro",
    "BalancingAreaContingencyReserveThermal",
    "BalancingAreaDeficit",
    "BalancingAreaDemand",
    "BalancingAreaDownReserveHydro",
    "BalancingAreaDownReserveThermal",
    "BalancingAreaTotalContingencyReserve",
    "BalancingAreaTotalRegulationDownReserve",
    "BalancingAreaTotalRegulationUpReserve",
    "BalancingAreaUpReserveHydro",
    "BalancingAreaUpReserveThermal",
    "TrueUpAreaLoad",
    "TrueUpHydroGeneration",
    "TrueUpRenewableGeneration",
    "TrueUpThermalGeneration",
    "VolumeInitialState",
    "alert_storage_unit_violation_cost",
    "alert_storage_violation",
    "alert_storage_violation_cost",
    "angulo",
    "annuityh",
    "annuityr",
    "annuityt",
    "batstg",
    "busverter",
    "captprice",
    "cashflowgroup",
    "cashflowh",
    "cashflowr",
    "cashflowt",
    "cinte1",
    "cirflw",
    "cmgbts",
    "cmgbus",
    "cmgcir",
    "cmgdem",
    "cmgemb",
    "cmgint",
    "cmglnk",
    "cmgreg",
    "cmgrge",
    "cmgrrh",
    "cmgrrt",
    "cmgsuc",
    "cmgter",
    "cmgter2",
    "cmgtmn",
    "cmgtur",
    "commit",
    "coshid",
    "costctr",
    "coster",
    "coster2",
    "costh",
    "costr",
    "costt",
    "cotfin",
    "cotfue",
    "cotoem",
    "cpnspl",
    "cvlmto",
    "dclink",
    "deadstorageviolation",
    "deadstorageviolationcost",
    "defbus",
    "defcit",
    "defcit_risk",
    "defcos",
    "demand",
    "demandel",
    "demxba",
    "demxbael",
    "discharge_rate_unit_violation_cost",
    "discharge_rate_viol",
    "discharge_rate_violation",
    "discharge_rate_violation_cost",
    "duraci",
    "duracipu",
    "eco2tr",
    "eneemb",
    "enever",
    "excsis",
    "finalhead",
    "flood_control_historical_scenarios",
    "forebay_drawdown_viol",
    "forebay_fillup_viol",
    "forebay_viol",
    "fprodt",
    "fprodtacc",
    "fuelcn",
    "fueltr",
    "gascmp",
    "gasprd",
    "gerbat",
    "gerbat_per_bus",
    "gergnd",
    "gergnd_per_bus",
    "gerhid",
    "gerhid_per_bus",
    "gerter",
    "gerter2",
    "gerter2_per_bus",
    "gerter_per_bus",
    "gsfflat",
    "hamort",
    "hblock",
    "hdeprec",
    "hequity",
    "hinterst",
    "hprop",
    "incstate",
    "inflow",
    "interc",
    "irrigation_unit_violation_cost",
    "irrigation_violation",
    "irrigation_violation_cost",
    "losi",
    "losses",
    "max_storage_historical_scenarios",
    "maxflw",
    "maximum_operative_storage_violation",
    "maximum_spillage_violation",
    "maximum_spillage_violation_cost",
    "maximum_total_outflow_violation",
    "maxopstorageunitviolationcost",
    "maxopstorageviolationcost",
    "maxspillageunitviolationcost",
    "maxtotaloutflowunitviolationcost",
    "maxtotaloutflowviolationcost",
    "mgvwat",
    "min_storage_historical_scenarios",
    "minimum_operative_storage_violation",
    "minimum_spillage_violation",
    "minimum_spillage_violation_cost",
    "minimum_total_outflow_violation",
    "minimum_turbine_unit_violation_cost",
    "minimum_turbine_violation",
    "minimum_turbine_violation_cost",
    "minopstorageunitviolationcost",
    "minopstorageviolationcost",
    "minspillpercentunitviolationcost",
    "minspillpercentviolation",
    "minspillpercentviolationcost",
    "minspillunitviolationcost",
    "mintotaloutflowunitviolationcost",
    "mintotaloutflowviolationcost",
    "mntout",
    "mxtout",
    "natinflow",
    "nuohid",
    "nuoter",
    "objcop",
    "oppchg",
    "opt2_batteryinvcost",
    "opt2_batteryreserve",
    "opt2_cirflow",
    "opt2_cirinvcost",
    "opt2_cmgdem2",
    "opt2_commit",
    "opt2_coshid",
    "opt2_coster",
    "opt2_dclflow",
    "opt2_dclinvcost",
    "opt2_deficitmw",
    "opt2_demandel",
    "opt2_duracipu",
    "opt2_ffrom",
    "opt2_fto",
    "opt2_fuelcons",
    "opt2_gerbat",
    "opt2_gergnd",
    "opt2_gergndmw",
    "opt2_gerhid",
    "opt2_gerhidmw",
    "opt2_gerter",
    "opt2_gertermw",
    "opt2_gminter",
    "opt2_hblock",
    "opt2_hydroinvcost",
    "opt2_hydroreserve",
    "opt2_infhid",
    "opt2_intercinvcost",
    "opt2_levcosthydro",
    "opt2_levcostrenw",
    "opt2_levcostrenwscen",
    "opt2_levcosttherm",
    "opt2_outhca",
    "opt2_outhea",
    "opt2_outhpa",
    "opt2_outrca",
    "opt2_outrea",
    "opt2_outrpa",
    "opt2_outtca",
    "opt2_outtea",
    "opt2_outtpa",
    "opt2_pothid",
    "opt2_potter",
    "opt2_renewinvcost",
    "opt2_spillhid",
    "opt2_stobat",
    "opt2_therminvcost",
    "opt2_thermreserve",
    "opt2_turbhid",
    "opt2_vergnd",
    "opt2_volhid",
    "penreg",
    "pipcp1",
    "pipcp2",
    "pipfl1",
    "pipfl2",
    "pmnter",
    "pnomhd",
    "pnomtr",
    "pothid",
    "potter",
    "powinj",
    "powinj_per_bus",
    "qevapo",
    "qfiltr",
    "qmaxim",
    "qminim",
    "qriego",
    "qtoutf",
    "qturbi",
    "qverti",
    "ramort",
    "rdeprec",
    "requity",
    "resger",
    "resghd",
    "resgtr",
    "resgtr2",
    "revctr",
    "rghsec",
    "rgtsec",
    "rinterst",
    "riskpremh",
    "riskpremr",
    "riskpremt",
    "rprop",
    "rrodhd",
    "rrodtr",
    "scenarioyearmap",
    "spotgroup",
    "spotseth",
    "spotsetr",
    "spotsett",
    "sysverter",
    "tamort",
    "target_storage_unit_violation_cost",
    "target_storage_violation",
    "target_storage_violation_cost",
    "targetstorage_lo",
    "targetstorage_up",
    "targetstoragectr",
    "tdeprec",
    "tequity",
    "tihhid",
    "tihter",
    "tinterst",
    "tprop",
    "trstup",
    "trueupareadefcit",
    "tsfhid",
    "tsfter",
    "usecir",
    "usedcl",
    "useful_storage",
    "useful_storage_final",
    "useful_storage_initial",
    "vergnd",
    "vinflow",
    "volfin",
    "volini",
    "volmax",
    "volmin",
    "vreseg",
    "vrestg",
    "waveguide"
};

local suffixes = { "", "__day", "__hour", "__week", "__month", "__trueup" }

local cases = PSR.studies();

local header = "----------------------------------------------------------------------------------------------------\n";
for case = 1, cases do
    header = header .. "case " .. case .. ": " .. Generic(case):path() .. "\n";
end
header = header .. "----------------------------------------------------------------------------------------------------";

local report = Report("Output data");
report:add_header(header);

for _, output in ipairs(outputs) do
    for _, suffix in ipairs(suffixes) do
        local compare = Compare(output .. suffix);

        local all_data_found = true;
        for case = 1, cases do
            local generic = Generic(case);

            local data = generic:load(output .. suffix);
            compare:add(data);

            if not data:loaded() then
                all_data_found = false;
            end
        end

        if all_data_found then
            report:push(compare);
        end
    end
end

report:save("compare-output-data");
